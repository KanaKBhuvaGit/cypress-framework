PROS: 
Easy setup and installation.
Live reloads (whenever you make changes to your code, the test will automatically run so you can keep the Cypress Test Runner open, no need to restart or rerun your test manually). 
Great plugins of choice that you can easily install Plugins | Cypress Documentation. 
Using Cypress, you can verify server response, even manipulate the method implementation as per your need, and can add the required timeout to the response. 
Great documentation available for Cypress. They documented very clearly and explained from basics to advanced level. Community support is also good. 
Cypress provides a customized dashboard feature, where it will show different types of reports and charts, although it is a paid product and there are certain packages available for enterprise level. 
Specifically for API, it will open the browser window and run the entire test case headed, due to this it reduces some execution time which is needed faster in case of API. 

CONS: 
Cypress is currently only supported for Chrome, Firefox, Edge, Brave, and Electron browsers. As a result, Cypress is a less favored option for cross-browser testing. 
Except JavaScript, it doesn’t support other global languages like java, python, C# etc. 
Cypress doesn’t support remote execution. 
Doesn’t support other browsers such as IE11 or Safari.
You can’t test cross domains so sometimes 2FA can be an issue if the login provider is on a separate domain. There are workarounds but it’s trickier to implement.
It doesn’t support multiple tabs but again there are some workarounds.   
It has limited support for iframe/popup handling. 
It doesn’t allow to run tests on two browsers at the same time, and restricts multi-threading execution. 



Features
Time Travel: Cypress takes snapshots as your tests run. Hover over commands in the Command Log to see exactly what happened at each step.
Debuggability: Stop guessing why your tests are failing. Debug directly from familiar tools like Developer Tools. Our readable errors and stack traces make debugging lightning fast.
Automatic Waiting: Never add waits or sleeps to your tests. Cypress automatically waits for commands and assertions before moving on. No more async hell.
Spies, Stubs, and Clocks: Verify and control the behavior of functions, server responses, or timers. The same functionality you love from unit testing is right at your fingertips.
Network Traffic Control: Easily control, stub, and test edge cases without involving your server. You can stub network traffic however you like.
Consistent Results: Our architecture doesn’t use Selenium or WebDriver. Say hello to fast, consistent and reliable tests that are flake-free.
Screenshots and Videos: View screenshots taken automatically on failure, or videos of your entire test suite when run from the CLI. Record to Cypress Cloud to store them with your test results for zero-configuration debugging.
Cross browser Testing: Run tests within Firefox and Chrome-family browsers (including Edge and Electron) locally and optimally in a Continuous Integration pipeline.
Smart Orchestration: Once you're set up to record to Cypress Cloud, easily parallelize your test suite, rerun failed specs first with Spec Prioritization, and cancel test runs on failures with Auto Cancellation for tight feedback loops.
Flake Detection: Discover and diagnose unreliable tests with Cypress Cloud's Flaky test management.



Cypress enables you to write all types of tests:
End-to-end tests
Component tests
Integration tests
Unit tests



What is E2E Testing?
E2E Testing is a technique that tests your app from the web browser through to the back end of your application, as well as testing integrations with third-party APIs and services. These types of tests are great at making sure your entire app is functioning as a cohesive whole.

Benefits of end-to-end tests:
Ensure your app is functioning as a cohesive whole
Tests match the user experience
Can be written by developers or QA Teams
Can be used for integration testing as well

Considerations for end-to-end tests:
More difficult to set up, run, and maintain
Provision testing infrastructure in CI
Testing certain scenarios require more setup

Common scenarios for end-to-end tests:
Validating critical workflows like authentication and purchasing
Ensuring data is persisted and displayed through multiple screens
Running Smoke Tests and System Checks before deployment



What is Component Testing?
Modern web frameworks provide ways to write applications by breaking them into smaller logical units called components. Components can range from fairly small (like a button) to more complex (like a registration form).
Component tests differ from end-to-end tests in that instead of visiting a URL to pull up an entire app, a component can be "mounted" and tested on its own. This allows you to focus on testing only the component's functionality and not worrying about other nuances with testing a component as part of the larger application.

Benefits of component tests:
Easier to test components in isolation
Fast and reliable
Easy to set up specific scenarios in tests
Don't rely on any external system to run

Considerations for component tests:
Do not ensure overall app quality
Do not call into external APIs/Services
Usually written by developers working on the component

Common scenarios for component tests:
Testing a date picker works properly for a variety of scenarios
That a form shows and hides specific sections based on input
Testing components coming out of a design system
Testing logic not tied to a component (like unit tests!)



Default Selector Priority:
data-cy
data-test
data-testid
id
class
tag
attributes
nth-child



Test Isolation
The behavior of running tests in a clean browser context is described as testIsolation.
The test isolation is a global configuration and can be overridden for end-to-end testing at the describe level with the testIsolation option.

When test isolation is enabled, Cypress resets the browser context before each test by:
clearing the dom state by visiting about:blank
clearing cookies in all domains
clearing localStorage in all domains
clearing sessionStorage in all domains


